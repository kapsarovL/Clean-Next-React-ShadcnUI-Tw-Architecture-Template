"use client"

import { useTasks } from "@/hooks/useTasks"
import { Button } from "@/components/ui/button"
import { LoadingSpinner } from "@/components/common/LoadingSpinner"
import { useToast } from "@/components/ui/use-toast"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useState } from "react"

export function TaskList() {
  // Generated by Copilot
  const { tasks, loading, deleteTask } = useTasks()
  const { toast } = useToast()

  if (loading) return <LoadingSpinner />

  return (
    <div className="space-y-4">
      {tasks.length === 0 ? (
        <p>No tasks available.</p>
      ) : (
        <ul className="space-y-2">
          {tasks.map((task) => (
            <li
              key={task.id}
              className="flex justify-between items-center p-2 border rounded"
            >
              <span>{task.title}</span>
              <div className="space-x-2">
                <Dialog>
                  <DialogTrigger asChild>
                    <Button variant="outline" size="sm">
                      Edit
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Edit Task</DialogTitle>
                      <DialogDescription>
                        Update the task title below.
                      </DialogDescription>
                    </DialogHeader>
                    <TaskEditForm task={task} />
                  </DialogContent>
                </Dialog>
                <Dialog>
                  <DialogTrigger asChild>
                    <Button variant="destructive" size="sm">
                      Delete
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Confirm Deletion</DialogTitle>
                      <DialogDescription>
                        Are you sure you want to delete &quot;{task.title}&quot;? This action cannot be undone.
                      </DialogDescription>
                    </DialogHeader>
                    <DialogFooter>
                      <Button variant="outline" onClick={() => {}}>
                        Cancel
                      </Button>
                      <Button
                        variant="destructive"
                        onClick={async () => {
                          try {
                            await deleteTask(task.id)
                            toast({
                              title: "Success",
                              description: "Task deleted successfully.",
                            })
                          } catch {
                            toast({
                              variant: "destructive",
                              title: "Error",
                              description: "Failed to delete task.",
                            })
                          }
                        }}
                      >
                        Delete
                      </Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  )
}

function TaskEditForm({ task }: { task: { id: string; title: string } }) {
  const [title, setTitle] = useState(task.title)
  const { updateTask } = useTasks()
  const { toast } = useToast()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    try {
      await updateTask({ id: task.id, title })
      toast({
        title: "Success",
        description: "Task updated successfully.",
      })
    } catch {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to update task.",
      })
    }
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <Label htmlFor="edit-task-title">Task Title</Label>
        <Input
          id="edit-task-title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          placeholder="Enter new task title"
        />
      </div>
      <Button type="submit">Save Changes</Button>
    </form>
  )
}